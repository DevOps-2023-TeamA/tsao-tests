<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.12.0 on win32)" generated="20240214 14:22:11.430" rpa="false" schemaversion="4">
<suite id="s1" name="Tests" source="C:\Users\chuag\tsao-tests\db\tests.robot">
<test id="s1-t1" name="Verify SQL Statement Ending With Semicolon Works" line="12">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.683" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.667" endtime="20240214 14:22:11.683"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.667" endtime="20240214 14:22:11.683"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<arg>SELECT * FROM tsao_accounts;</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.683" level="INFO">Executing : Query  |  SELECT * FROM tsao_accounts; </msg>
<status status="PASS" starttime="20240214 14:22:11.683" endtime="20240214 14:22:11.683"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.683" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.683" endtime="20240214 14:22:11.683"/>
</kw>
<doc>Verify that query with semicolon works.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.667" endtime="20240214 14:22:11.683"/>
</test>
<test id="s1-t2" name="Verify SQL Statement Ending Without Semicolon Works" line="19">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.700" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.683" endtime="20240214 14:22:11.702"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.683" endtime="20240214 14:22:11.702"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<arg>SELECT * FROM tsao_accounts</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.703" level="INFO">Executing : Query  |  SELECT * FROM tsao_accounts </msg>
<status status="PASS" starttime="20240214 14:22:11.703" endtime="20240214 14:22:11.704"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.705" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.705" endtime="20240214 14:22:11.705"/>
</kw>
<doc>Verify that query without semicolon works.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.683" endtime="20240214 14:22:11.705"/>
</test>
<test id="s1-t3" name="Check If tsao_accounts Table Exists" line="26">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.710" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.708" endtime="20240214 14:22:11.712"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.708" endtime="20240214 14:22:11.712"/>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>tsao_accounts</arg>
<doc>Check if the given table exists in the database.</doc>
<msg timestamp="20240214 14:22:11.712" level="INFO">Executing : Table Must Exist  |  tsao_accounts</msg>
<msg timestamp="20240214 14:22:11.712" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='tsao_accounts'</msg>
<status status="PASS" starttime="20240214 14:22:11.712" endtime="20240214 14:22:11.712"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.712" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.712" endtime="20240214 14:22:11.712"/>
</kw>
<doc>Verify that tsao_accounts table exist.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.707" endtime="20240214 14:22:11.712"/>
</test>
<test id="s1-t4" name="Insert Data into tsao_accounts Table" line="33">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.712" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.712" endtime="20240214 14:22:11.725"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.712" endtime="20240214 14:22:11.725"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (6, 'Steve Jobs', 'sj1955', 'f223faa96f22916294922b171a2696d868fd1f9129302eb41a45b2a2ea2ebbfd', 'User', '2024-01-22 12:34:56', true, false);</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:11.725" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (6, 'Steve Jobs', 'sj1955', 'f223faa96f22916294922b171a2696d868fd1f9129302eb41a45b2a2ea2ebbfd', 'User', '2024-01-22 12:34:56', true, false);</msg>
<msg timestamp="20240214 14:22:11.725" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.725"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.725" level="INFO">None</msg>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.725"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240214 14:22:11.725" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.725"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.725" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.725"/>
</kw>
<doc>Test to INSERT data into tsao_accounts table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:11.712" endtime="20240214 14:22:11.725"/>
</test>
<test id="s1-t5" name="Update Data in tsao_accounts Table" line="42">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.725" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.742"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.742"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE tsao_accounts SET Username = 'sj55', Role= 'Administrator' WHERE ID = 6;</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:11.743" level="INFO">Executing : Execute SQL String  |  UPDATE tsao_accounts SET Username = 'sj55', Role= 'Administrator' WHERE ID = 6;</msg>
<msg timestamp="20240214 14:22:11.745" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20240214 14:22:11.743" endtime="20240214 14:22:11.745"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.745" level="INFO">None</msg>
<status status="PASS" starttime="20240214 14:22:11.745" endtime="20240214 14:22:11.745"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240214 14:22:11.745" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240214 14:22:11.745" endtime="20240214 14:22:11.745"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.745" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.745" endtime="20240214 14:22:11.745"/>
</kw>
<doc>Test to UPDATE data into tsao_accounts table.</doc>
<tag>Update</tag>
<status status="PASS" starttime="20240214 14:22:11.725" endtime="20240214 14:22:11.745"/>
</test>
<test id="s1-t6" name="Delete Data in tsao_accounts Table" line="51">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.745" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.745" endtime="20240214 14:22:11.762"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.745" endtime="20240214 14:22:11.762"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>DELETE FROM tsao_accounts WHERE ID = 6;</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:11.762" level="INFO">Executing : Execute SQL String  |  DELETE FROM tsao_accounts WHERE ID = 6;</msg>
<msg timestamp="20240214 14:22:11.762" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.762"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.762" level="INFO">None</msg>
<status status="PASS" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.762"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240214 14:22:11.762" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.762"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.762" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.762"/>
</kw>
<doc>Test to DELETE data into tsao_accounts table.</doc>
<tag>Delete</tag>
<status status="PASS" starttime="20240214 14:22:11.745" endtime="20240214 14:22:11.762"/>
</test>
<test id="s1-t7" name="Select tsao_records Table With Multiple Rows" line="60">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.762" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.777"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.777"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>SELECT CompanyPOC from tsao_records</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.778" level="INFO">Executing : Query  |  SELECT CompanyPOC from tsao_records </msg>
<msg timestamp="20240214 14:22:11.779" level="INFO">${output} = (('Er Poi Voon',), ('Ben Low',))</msg>
<status status="PASS" starttime="20240214 14:22:11.778" endtime="20240214 14:22:11.779"/>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<arg>${output}</arg>
<arg>3</arg>
<doc>Verifies that the length of the given item is correct.</doc>
<msg timestamp="20240214 14:22:11.779" level="INFO">Length is 2</msg>
<msg timestamp="20240214 14:22:11.779" level="FAIL">Length of '(('Er Poi Voon',), ('Ben Low',))' should be 3 but is 2.</msg>
<status status="FAIL" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.779"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}[0][0][0]</arg>
<arg>E</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.779"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}[1][0]</arg>
<arg>Ben Low</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.779"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}[2][0]</arg>
<arg>John Law</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.779"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.779" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.779"/>
</kw>
<doc>Test to SELECT multiple rows of data in tsao_records table.</doc>
<tag>Select</tag>
<status status="FAIL" starttime="20240214 14:22:11.762" endtime="20240214 14:22:11.779">Length of '(('Er Poi Voon',), ('Ben Low',))' should be 3 but is 2.</status>
</test>
<test id="s1-t8" name="Check If Data Exists In tsao_accounts Table" line="71">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.779" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.793"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.793"/>
</kw>
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>SELECT ID FROM tsao_accounts WHERE Name = 'Ben Low';</arg>
<doc>Check if any row would be returned by given the input ``selectStatement``. If there are no results, then this will
throw an AssertionError.</doc>
<msg timestamp="20240214 14:22:11.794" level="INFO">Executing : Check If Exists In Database  |  SELECT ID FROM tsao_accounts WHERE Name = 'Ben Low';</msg>
<msg timestamp="20240214 14:22:11.794" level="INFO">Executing : Query  |  SELECT ID FROM tsao_accounts WHERE Name = 'Ben Low'; </msg>
<status status="PASS" starttime="20240214 14:22:11.794" endtime="20240214 14:22:11.795"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.795" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.795" endtime="20240214 14:22:11.795"/>
</kw>
<doc>Verify that specific data exist in database.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.779" endtime="20240214 14:22:11.795"/>
</test>
<test id="s1-t9" name="Check If Data Do Not Exists In tsao_accounts Table" line="78">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.795" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.795" endtime="20240214 14:22:11.808"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.795" endtime="20240214 14:22:11.808"/>
</kw>
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<arg>SELECT ID FROM tsao_records WHERE ContactRole = 'Lecturer';</arg>
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<msg timestamp="20240214 14:22:11.809" level="INFO">Executing : Check If Not Exists In Database  |  SELECT ID FROM tsao_records WHERE ContactRole = 'Lecturer';</msg>
<msg timestamp="20240214 14:22:11.809" level="INFO">Executing : Query  |  SELECT ID FROM tsao_records WHERE ContactRole = 'Lecturer'; </msg>
<status status="PASS" starttime="20240214 14:22:11.809" endtime="20240214 14:22:11.810"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.811" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.811" endtime="20240214 14:22:11.811"/>
</kw>
<doc>Verify that specific data does not exist in database.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.795" endtime="20240214 14:22:11.811"/>
</test>
<test id="s1-t10" name="Check Contact Role Values of tsao_records Table" line="85">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.813" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.813" endtime="20240214 14:22:11.825"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.813" endtime="20240214 14:22:11.825"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${invalid_contact_roles}</var>
<arg>SELECT ContactRole FROM tsao_records WHERE ContactRole NOT IN ('Staff', 'Student')</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.826" level="INFO">Executing : Query  |  SELECT ContactRole FROM tsao_records WHERE ContactRole NOT IN ('Staff', 'Student') </msg>
<msg timestamp="20240214 14:22:11.827" level="INFO">${invalid_contact_roles} = ()</msg>
<status status="PASS" starttime="20240214 14:22:11.826" endtime="20240214 14:22:11.827"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${invalid_contact_roles}</arg>
<arg>Fail</arg>
<arg>Invalid 'ContactRole' values found in 'tsao_records': ${invalid_contact_roles}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.828" endtime="20240214 14:22:11.828"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.829" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.829" endtime="20240214 14:22:11.829"/>
</kw>
<doc>Verify that 'ContactRole' values in 'tsao_records' are either 'Staff' or 'Student'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.813" endtime="20240214 14:22:11.830"/>
</test>
<test id="s1-t11" name="Verify Row Count of tsao_records Table is Equal to X" line="93">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.830" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.830" endtime="20240214 14:22:11.845"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.830" endtime="20240214 14:22:11.845"/>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>SELECT ID FROM tsao_records</arg>
<arg>3</arg>
<doc>Check if the number of rows returned from ``selectStatement`` is equal to the value submitted. If not, then this
will throw an AssertionError.</doc>
<msg timestamp="20240214 14:22:11.845" level="INFO">Executing : Row Count Is Equal To X  |  SELECT ID FROM tsao_records  |  3</msg>
<msg timestamp="20240214 14:22:11.845" level="INFO">Executing : Row Count  |  SELECT ID FROM tsao_records</msg>
<msg timestamp="20240214 14:22:11.845" level="FAIL">Expected 3 rows, but 2 were returned from: 'SELECT ID FROM tsao_records'</msg>
<status status="FAIL" starttime="20240214 14:22:11.845" endtime="20240214 14:22:11.845"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.845" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.845" endtime="20240214 14:22:11.845"/>
</kw>
<doc>Verify the row count of tsao_records table is equal to X value.</doc>
<tag>Verify/Check</tag>
<status status="FAIL" starttime="20240214 14:22:11.830" endtime="20240214 14:22:11.845">Expected 3 rows, but 2 were returned from: 'SELECT ID FROM tsao_records'</status>
</test>
<test id="s1-t12" name="Verify Row Count of tsao_accounts Table is Less Than X" line="100">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.845" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.845" endtime="20240214 14:22:11.878"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.845" endtime="20240214 14:22:11.878"/>
</kw>
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<arg>SELECT ID FROM tsao_accounts</arg>
<arg>7</arg>
<doc>Check if the number of rows returned from ``selectStatement`` is less than the value submitted. If not, then this
will throw an AssertionError.</doc>
<msg timestamp="20240214 14:22:11.878" level="INFO">Executing : Row Count Is Less Than X  |  SELECT ID FROM tsao_accounts  |  7</msg>
<msg timestamp="20240214 14:22:11.878" level="INFO">Executing : Row Count  |  SELECT ID FROM tsao_accounts</msg>
<status status="PASS" starttime="20240214 14:22:11.878" endtime="20240214 14:22:11.878"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.880" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.880" endtime="20240214 14:22:11.880"/>
</kw>
<doc>Verify the row count of tsao_accounts table is less than X value.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.845" endtime="20240214 14:22:11.880"/>
</test>
<test id="s1-t13" name="Retrieve records from tsao_records Table" line="107">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.880" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.880" endtime="20240214 14:22:11.893"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.880" endtime="20240214 14:22:11.893"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>SELECT * FROM tsao_records</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:11.894" level="INFO">Executing : Execute SQL String  |  SELECT * FROM tsao_records</msg>
<msg timestamp="20240214 14:22:11.895" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20240214 14:22:11.894" endtime="20240214 14:22:11.895"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240214 14:22:11.895" endtime="20240214 14:22:11.896"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.896" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.896" endtime="20240214 14:22:11.896"/>
</kw>
<doc>Test to Rretrieve the records from tsao_records table.</doc>
<tag>Retrieve</tag>
<status status="PASS" starttime="20240214 14:22:11.880" endtime="20240214 14:22:11.896"/>
</test>
<test id="s1-t14" name="Verify Query - Get results as a list of dictionaries from tsao_accounts Table" line="115">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.896" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.896" endtime="20240214 14:22:11.913"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.896" endtime="20240214 14:22:11.913"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>SELECT * FROM tsao_accounts</arg>
<arg>returnAsDict=True</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.913" level="INFO">Executing : Query  |  SELECT * FROM tsao_accounts </msg>
<msg timestamp="20240214 14:22:11.913" level="INFO">${output} = [{'ID': 1, 'Name': 'Ben Low', 'Username': 'lkh2', 'Password': '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 'Role': 'Administrator', 'CreationDate': datetime.datetime(2024, 1, 1,...</msg>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.913" level="INFO">[{'ID': 1, 'Name': 'Ben Low', 'Username': 'lkh2', 'Password': '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 'Role': 'Administrator', 'CreationDate': datetime.datetime(2024, 1, 1, 12, 0), 'IsApproved': 1, 'IsDeleted': 0}, {'ID': 2, 'Name': 'Er Poi Voon', 'Username': 'epv', 'Password': 'a075d17f3d453073853f813838c15b8023b8c487038436354fe599c3942e1f95', 'Role': 'Administrator', 'CreationDate': datetime.datetime(2024, 1, 2, 14, 30), 'IsApproved': 1, 'IsDeleted': 0}, {'ID': 3, 'Name': 'Isabelle Pak', 'Username': 'isabellepak', 'Password': '4b358ed84b7940619235a22328c584c7bc4508d4524e75231d6f450521d16a17', 'Role': 'User', 'CreationDate': datetime.datetime(2024, 1, 3, 10, 45), 'IsApproved': 0, 'IsDeleted': 0}, {'ID': 4, 'Name': 'Low Wee San', 'Username': 'lws', 'Password': 'e367746b6b6b8519cae09fbca87e509d7dc9508ef0234de292666bd1c2404680', 'Role': 'Administrator', 'CreationDate': datetime.datetime(2024, 1, 3, 14, 30), 'IsApproved': 1, 'IsDeleted': 0}, {'ID': 5, 'Name': 'Deleted User', 'Username': 'dui', 'Password': '1185f37d33b0f89e331f101a51bb8e51165c7efda15950b86a3ebcbb363f898e', 'Role': 'User', 'CreationDate': datetime.datetime(2024, 1, 1, 10, 0), 'IsApproved': 1, 'IsDeleted': 1}, {'ID': 7, 'Name': 'John', 'Username': 'johndoe', 'Password': 'password123', 'Role': 'User', 'CreationDate': datetime.datetime(2024, 1, 22, 12, 34, 56), 'IsApproved': 1, 'IsDeleted': 0}]</msg>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get From Dictionary" library="Collections">
<var>${value 1}</var>
<arg>${output}[0]</arg>
<arg>Name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20240214 14:22:11.913" level="INFO">${value 1} = Ben Low</msg>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</branch>
<branch type="EXCEPT">
<pattern>Dictionary does not contain key 'Name'.</pattern>
<kw name="Get From Dictionary" library="Collections">
<var>${value 1}</var>
<arg>${output}[0]</arg>
<arg>Name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<status status="NOT RUN" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<status status="NOT RUN" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</branch>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</try>
<try>
<branch type="TRY">
<kw name="Get From Dictionary" library="Collections">
<var>${value 2}</var>
<arg>${output}[1]</arg>
<arg>Name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20240214 14:22:11.913" level="INFO">${value 2} = Er Poi Voon</msg>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</branch>
<branch type="EXCEPT">
<pattern>Dictionary does not contain key 'FIRST_NAME'.</pattern>
<kw name="Get From Dictionary" library="Collections">
<var>${value 2}</var>
<arg>${output}[1]</arg>
<arg>Name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<status status="NOT RUN" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<status status="NOT RUN" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</branch>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</try>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${value 1}</arg>
<arg>Ben Low</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${value 2}</arg>
<arg>Er Poi Voon</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.913" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.913"/>
</kw>
<doc>Test to get result as a list of dictionaries from tsao_accounts table.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.896" endtime="20240214 14:22:11.913"/>
</test>
<test id="s1-t15" name="Verify Columns Existence in tsao_accounts Table" line="135">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.923" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.942"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.942"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${columns}</var>
<arg>SHOW COLUMNS FROM tsao_accounts</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.943" level="INFO">Executing : Query  |  SHOW COLUMNS FROM tsao_accounts </msg>
<msg timestamp="20240214 14:22:11.947" level="INFO">${columns} = (('ID', 'int', 'NO', 'PRI', None, 'auto_increment'), ('Name', 'varchar(100)', 'NO', '', None, ''), ('Username', 'varchar(100)', 'NO', 'UNI', None, ''), ('Password', 'char(64)', 'NO', '', None, ''), ('...</msg>
<status status="PASS" starttime="20240214 14:22:11.943" endtime="20240214 14:22:11.947"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{column_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20240214 14:22:11.948" level="INFO">@{column_names} = [ ]</msg>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<for flavor="IN">
<var>${column}</var>
<value>@{columns}</value>
<iter>
<var name="${column}">('ID', 'int', 'NO', 'PRI', None, 'auto_increment')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('Name', 'varchar(100)', 'NO', '', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('Username', 'varchar(100)', 'NO', 'UNI', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('Password', 'char(64)', 'NO', '', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('Role', "enum('Administrator','User')", 'NO', '', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('CreationDate', 'datetime', 'NO', '', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('IsApproved', 'tinyint(1)', 'NO', '', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.948"/>
</iter>
<iter>
<var name="${column}">('IsDeleted', 'tinyint(1)', 'NO', '', None, '')</var>
<kw name="Append To List" library="Collections">
<arg>${column_names}</arg>
<arg>${column[0]}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.957" endtime="20240214 14:22:11.957"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.957"/>
</iter>
<status status="PASS" starttime="20240214 14:22:11.948" endtime="20240214 14:22:11.957"/>
</for>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>ID</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.958" endtime="20240214 14:22:11.958"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>Name</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.958" endtime="20240214 14:22:11.959"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>Username</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.959" endtime="20240214 14:22:11.959"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>Password</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.960" endtime="20240214 14:22:11.960"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>Role</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.961" endtime="20240214 14:22:11.961"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>CreationDate</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.961" endtime="20240214 14:22:11.962"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>IsApproved</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.962" endtime="20240214 14:22:11.962"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${column_names}</arg>
<arg>IsDeleted</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:11.962" endtime="20240214 14:22:11.963"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:11.963" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:11.963" endtime="20240214 14:22:11.963"/>
</kw>
<doc>Verify that all columns exist in the 'tsao_accounts' table.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.913" endtime="20240214 14:22:11.963"/>
</test>
<test id="s1-t16" name="Verify Column Data Types of tsao_accounts Table" line="154">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:11.963" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:11.963" endtime="20240214 14:22:11.963"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.963" endtime="20240214 14:22:11.963"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${data_types}</var>
<arg>SHOW COLUMNS FROM tsao_accounts</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:11.963" level="INFO">Executing : Query  |  SHOW COLUMNS FROM tsao_accounts </msg>
<msg timestamp="20240214 14:22:11.974" level="INFO">${data_types} = (('ID', 'int', 'NO', 'PRI', None, 'auto_increment'), ('Name', 'varchar(100)', 'NO', '', None, ''), ('Username', 'varchar(100)', 'NO', 'UNI', None, ''), ('Password', 'char(64)', 'NO', '', None, ''), ('...</msg>
<status status="PASS" starttime="20240214 14:22:11.963" endtime="20240214 14:22:11.974"/>
</kw>
<for flavor="IN">
<var>${column_info}</var>
<value>@{data_types}</value>
<iter>
<var name="${column_info}">('ID', 'int', 'NO', 'PRI', None, 'auto_increment')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:11.975" level="INFO">${column_data_type} = int</msg>
<status status="PASS" starttime="20240214 14:22:11.974" endtime="20240214 14:22:11.975"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.975" level="INFO">Column Data Type: int</msg>
<status status="PASS" starttime="20240214 14:22:11.975" endtime="20240214 14:22:11.975"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:11.976" endtime="20240214 14:22:11.977"/>
</kw>
<msg timestamp="20240214 14:22:11.977" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:11.976" endtime="20240214 14:22:11.977"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.977" endtime="20240214 14:22:11.977"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.975" endtime="20240214 14:22:11.977"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.975" endtime="20240214 14:22:11.977"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.978" level="FAIL">'int' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:11.978" endtime="20240214 14:22:11.978"/>
</kw>
<msg timestamp="20240214 14:22:11.978" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.978" endtime="20240214 14:22:11.978"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.978" endtime="20240214 14:22:11.978"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.977" endtime="20240214 14:22:11.978"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.977" endtime="20240214 14:22:11.978"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'int' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.978" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'int' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'int' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'int' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'int' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'int' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.974" endtime="20240214 14:22:11.979"/>
</iter>
<iter>
<var name="${column_info}">('Name', 'varchar(100)', 'NO', '', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:11.979" level="INFO">${column_data_type} = varchar(100)</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.979" level="INFO">Column Data Type: varchar(100)</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.979" level="FAIL">'varchar(100)' does not contain 'int'</msg>
<status status="FAIL" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<msg timestamp="20240214 14:22:11.979" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.979"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.990" level="FAIL">'varchar(100)' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:11.990" endtime="20240214 14:22:11.990"/>
</kw>
<msg timestamp="20240214 14:22:11.990" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.990" endtime="20240214 14:22:11.990"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.990" endtime="20240214 14:22:11.990"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.990"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.990"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.991" level="FAIL">'varchar(100)' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:11.991" endtime="20240214 14:22:11.991"/>
</kw>
<msg timestamp="20240214 14:22:11.991" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.991" endtime="20240214 14:22:11.991"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.992" endtime="20240214 14:22:11.992"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.990" endtime="20240214 14:22:11.992"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.990" endtime="20240214 14:22:11.992"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.992" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.992" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.979" endtime="20240214 14:22:11.993"/>
</iter>
<iter>
<var name="${column_info}">('Username', 'varchar(100)', 'NO', 'UNI', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:11.993" level="INFO">${column_data_type} = varchar(100)</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.993" level="INFO">Column Data Type: varchar(100)</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'int'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:11.993" level="FAIL">'varchar(100)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<msg timestamp="20240214 14:22:11.993" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</iter>
<iter>
<var name="${column_info}">('Password', 'char(64)', 'NO', '', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:11.993" level="INFO">${column_data_type} = char(64)</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:11.993" level="INFO">Column Data Type: char(64)</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:11.993"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.007" level="FAIL">'char(64)' does not contain 'int'</msg>
<status status="FAIL" starttime="20240214 14:22:12.007" endtime="20240214 14:22:12.007"/>
</kw>
<msg timestamp="20240214 14:22:12.007" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:12.007"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.007" endtime="20240214 14:22:12.007"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:12.007"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:12.007"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.009" level="FAIL">'char(64)' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.008" endtime="20240214 14:22:12.009"/>
</kw>
<msg timestamp="20240214 14:22:12.009" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.008" endtime="20240214 14:22:12.009"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.009" endtime="20240214 14:22:12.009"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.007" endtime="20240214 14:22:12.009"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.007" endtime="20240214 14:22:12.009"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.010" level="FAIL">'char(64)' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.010" endtime="20240214 14:22:12.010"/>
</kw>
<msg timestamp="20240214 14:22:12.010" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.010" endtime="20240214 14:22:12.010"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.010" endtime="20240214 14:22:12.010"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.009" endtime="20240214 14:22:12.011"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.009" endtime="20240214 14:22:12.011"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:12.011" endtime="20240214 14:22:12.011"/>
</kw>
<msg timestamp="20240214 14:22:12.011" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:12.011" endtime="20240214 14:22:12.011"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.012" endtime="20240214 14:22:12.012"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.011" endtime="20240214 14:22:12.012"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.011" endtime="20240214 14:22:12.012"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'char(64)' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.012" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.012" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'char(64)' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'char(64)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'char(64)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:11.993" endtime="20240214 14:22:12.013"/>
</iter>
<iter>
<var name="${column_info}">('Role', "enum('Administrator','User')", 'NO', '', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:12.013" level="INFO">${column_data_type} = enum('Administrator','User')</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:12.013" level="INFO">Column Data Type: enum('Administrator','User')</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'enum('administrator','user')' does not contain 'int'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'enum('administrator','user')' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.013" level="FAIL">'enum('administrator','user')' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<msg timestamp="20240214 14:22:12.013" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.013"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.023" level="FAIL">'enum('administrator','user')' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.023" endtime="20240214 14:22:12.023"/>
</kw>
<msg timestamp="20240214 14:22:12.023" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.023" endtime="20240214 14:22:12.023"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.023" endtime="20240214 14:22:12.023"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.023"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.023"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.024" level="FAIL">'enum('administrator','user')' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:12.024" endtime="20240214 14:22:12.024"/>
</kw>
<msg timestamp="20240214 14:22:12.024" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.024" endtime="20240214 14:22:12.024"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.023" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.023" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'enum('administrator','user')' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'enum('administrator','user')' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'enum('administrator','user')' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.013" endtime="20240214 14:22:12.025"/>
</iter>
<iter>
<var name="${column_info}">('CreationDate', 'datetime', 'NO', '', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:12.025" level="INFO">${column_data_type} = datetime</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:12.025" level="INFO">Column Data Type: datetime</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'datetime' does not contain 'int'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'datetime' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'datetime' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'datetime' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'datetime' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.025" level="FAIL">'datetime' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<msg timestamp="20240214 14:22:12.025" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.025"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.040" level="FAIL">'datetime' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.040"/>
</kw>
<msg timestamp="20240214 14:22:12.040" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.040"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.040" endtime="20240214 14:22:12.040"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.040"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.040"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.025" endtime="20240214 14:22:12.040"/>
</iter>
<iter>
<var name="${column_info}">('IsApproved', 'tinyint(1)', 'NO', '', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:12.041" level="INFO">${column_data_type} = tinyint(1)</msg>
<status status="PASS" starttime="20240214 14:22:12.040" endtime="20240214 14:22:12.041"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:12.041" level="INFO">Column Data Type: tinyint(1)</msg>
<status status="PASS" starttime="20240214 14:22:12.041" endtime="20240214 14:22:12.041"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.041" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.041" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.040" endtime="20240214 14:22:12.042"/>
</iter>
<iter>
<var name="${column_info}">('IsDeleted', 'tinyint(1)', 'NO', '', None, '')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${column_data_type}</var>
<arg>${column_info[1]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:12.042" level="INFO">${column_data_type} = tinyint(1)</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Column Data Type: ${column_data_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:12.042" level="INFO">Column Data Type: tinyint(1)</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>int</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = True</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>varchar(100)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'varchar(100)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>char(64)</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.042" level="FAIL">'tinyint(1)' does not contain 'char(64)'</msg>
<status status="FAIL" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<msg timestamp="20240214 14:22:12.042" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.042"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>enum('Administrator', 'User')</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.057" level="FAIL">'tinyint(1)' does not contain 'enum('Administrator', 'User')'</msg>
<status status="FAIL" starttime="20240214 14:22:12.057" endtime="20240214 14:22:12.057"/>
</kw>
<msg timestamp="20240214 14:22:12.057" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.057" endtime="20240214 14:22:12.057"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.057" endtime="20240214 14:22:12.058"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.057" endtime="20240214 14:22:12.058"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.057" endtime="20240214 14:22:12.058"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>datetime</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.059" level="FAIL">'tinyint(1)' does not contain 'datetime'</msg>
<status status="FAIL" starttime="20240214 14:22:12.059" endtime="20240214 14:22:12.059"/>
</kw>
<msg timestamp="20240214 14:22:12.059" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.058" endtime="20240214 14:22:12.059"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.059" endtime="20240214 14:22:12.059"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.058" endtime="20240214 14:22:12.059"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.058" endtime="20240214 14:22:12.059"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.060" level="FAIL">'tinyint(1)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.060" endtime="20240214 14:22:12.060"/>
</kw>
<msg timestamp="20240214 14:22:12.060" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.060" endtime="20240214 14:22:12.060"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.060" endtime="20240214 14:22:12.060"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.059" endtime="20240214 14:22:12.060"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.059" endtime="20240214 14:22:12.060"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Verify Data Type Contains</arg>
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Verify Data Type Contains">
<arg>${column_data_type.lower()}</arg>
<arg>bool</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${contains}</var>
<arg>Should Contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${actual}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20240214 14:22:12.061" level="FAIL">'tinyint(1)' does not contain 'bool'</msg>
<status status="FAIL" starttime="20240214 14:22:12.061" endtime="20240214 14:22:12.061"/>
</kw>
<msg timestamp="20240214 14:22:12.061" level="INFO">${contains} = False</msg>
<status status="PASS" starttime="20240214 14:22:12.061" endtime="20240214 14:22:12.061"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${contains}' == 'FAIL'</arg>
<arg>Fail</arg>
<arg>Expected data type '${expected}' not found in '${actual}'</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.061" endtime="20240214 14:22:12.061"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.061" endtime="20240214 14:22:12.061"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.060" endtime="20240214 14:22:12.061"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.042" endtime="20240214 14:22:12.061"/>
</iter>
<status status="PASS" starttime="20240214 14:22:11.974" endtime="20240214 14:22:12.062"/>
</for>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.062" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.062" endtime="20240214 14:22:12.062"/>
</kw>
<doc>Verify the data types of each column of tsao_accounts table.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:11.963" endtime="20240214 14:22:12.062"/>
</test>
<test id="s1-t17" name="Verify Primary Key of tsao_accounts Table" line="173">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.065" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.064" endtime="20240214 14:22:12.067"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.064" endtime="20240214 14:22:12.067"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${id_attributes}</var>
<arg>SHOW COLUMNS FROM tsao_accounts WHERE Field='ID'</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.067" level="INFO">Executing : Query  |  SHOW COLUMNS FROM tsao_accounts WHERE Field='ID' </msg>
<msg timestamp="20240214 14:22:12.068" level="INFO">${id_attributes} = (('ID', 'int', 'NO', 'PRI', None, 'auto_increment'),)</msg>
<status status="PASS" starttime="20240214 14:22:12.067" endtime="20240214 14:22:12.069"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${attribute_info}</var>
<arg>${id_attributes[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240214 14:22:12.069" level="INFO">${attribute_info} = ('ID', 'int', 'NO', 'PRI', None, 'auto_increment')</msg>
<status status="PASS" starttime="20240214 14:22:12.069" endtime="20240214 14:22:12.069"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${attribute_list}</var>
<arg>${attribute_info[3]}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20240214 14:22:12.070" level="INFO">${attribute_list} = ['PRI']</msg>
<status status="PASS" starttime="20240214 14:22:12.069" endtime="20240214 14:22:12.070"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${attribute_list}</arg>
<arg>PRI</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:12.070" endtime="20240214 14:22:12.070"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${auto_increment}</var>
<arg>'${attribute_info[5]}' != 'NO'</arg>
<arg>${attribute_info[5]}</arg>
<arg>NOT FOUND</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20240214 14:22:12.071" level="INFO">${auto_increment} = auto_increment</msg>
<status status="PASS" starttime="20240214 14:22:12.070" endtime="20240214 14:22:12.071"/>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<arg>${auto_increment}</arg>
<arg>NOT FOUND</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<status status="PASS" starttime="20240214 14:22:12.071" endtime="20240214 14:22:12.071"/>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<arg>${auto_increment}</arg>
<arg>NO</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<status status="PASS" starttime="20240214 14:22:12.072" endtime="20240214 14:22:12.072"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.074" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.073" endtime="20240214 14:22:12.074"/>
</kw>
<doc>Verify the primary key and auto-increment for the 'ID' column of tsao_accounts table.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.063" endtime="20240214 14:22:12.074"/>
</test>
<test id="s1-t18" name="Verify Foreign Key Relationship in tsao_records is Valid" line="186">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.077" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.076" endtime="20240214 14:22:12.089"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.076" endtime="20240214 14:22:12.089"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${invalid_foreign_keys}</var>
<arg>SELECT r.AccountID FROM tsao_records r LEFT JOIN tsao_accounts a ON r.AccountID = a.ID WHERE a.ID IS NULL</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.090" level="INFO">Executing : Query  |  SELECT r.AccountID FROM tsao_records r LEFT JOIN tsao_accounts a ON r.AccountID = a.ID WHERE a.ID IS NULL </msg>
<msg timestamp="20240214 14:22:12.091" level="INFO">${invalid_foreign_keys} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.090" endtime="20240214 14:22:12.091"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${invalid_foreign_keys}</arg>
<arg>Fail</arg>
<arg>Invalid foreign keys found in 'tsao_records': ${invalid_foreign_keys}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.092" endtime="20240214 14:22:12.092"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.093" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.092" endtime="20240214 14:22:12.093"/>
</kw>
<doc>Verify that the 'AccountID' in 'tsao_records' references a valid 'ID' in 'tsao_accounts'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.076" endtime="20240214 14:22:12.093"/>
</test>
<test id="s1-t19" name="Verify Unique Constraint on the Username Column of tsao_accounts Table" line="194">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.096" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.096" endtime="20240214 14:22:12.108"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.096" endtime="20240214 14:22:12.108"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${unique_constraint}</var>
<arg>SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS WHERE table_name = 'tsao_accounts' AND column_name = 'Username' AND non_unique = 0</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.109" level="INFO">Executing : Query  |  SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS WHERE table_name = 'tsao_accounts' AND column_name = 'Username' AND non_unique = 0 </msg>
<msg timestamp="20240214 14:22:12.111" level="INFO">${unique_constraint} = ((1,),)</msg>
<status status="PASS" starttime="20240214 14:22:12.109" endtime="20240214 14:22:12.112"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${unique_constraint[0][0]} &gt; 0</arg>
<arg>Log</arg>
<arg>Unique constraint exists for the 'Username' column</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Log" library="BuiltIn">
<arg>Unique constraint exists for the 'Username' column</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240214 14:22:12.127" level="INFO">Unique constraint exists for the 'Username' column</msg>
<status status="PASS" starttime="20240214 14:22:12.113" endtime="20240214 14:22:12.127"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.112" endtime="20240214 14:22:12.127"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${unique_constraint[0][0]} == 0</arg>
<arg>Fail</arg>
<arg>No unique constraint found for the 'Username' column</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.128" endtime="20240214 14:22:12.129"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.129" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.129" endtime="20240214 14:22:12.129"/>
</kw>
<doc>Verify the unique constraint on the 'Username' column of tsao_accounts table.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.095" endtime="20240214 14:22:12.129"/>
</test>
<test id="s1-t20" name="Verify Enum Values of tsao_accounts Table" line="203">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.129" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.129" endtime="20240214 14:22:12.142"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.129" endtime="20240214 14:22:12.142"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${enum_values}</var>
<arg>SELECT DISTINCT Role FROM tsao_accounts</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.143" level="INFO">Executing : Query  |  SELECT DISTINCT Role FROM tsao_accounts </msg>
<msg timestamp="20240214 14:22:12.144" level="INFO">${enum_values} = (('Administrator',), ('User',))</msg>
<status status="PASS" starttime="20240214 14:22:12.143" endtime="20240214 14:22:12.144"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${enum_values[0]}</arg>
<arg>Administrator</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:12.145" endtime="20240214 14:22:12.146"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${enum_values[1]}</arg>
<arg>User</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20240214 14:22:12.146" endtime="20240214 14:22:12.147"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.147" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.147" endtime="20240214 14:22:12.147"/>
</kw>
<doc>Verify that the 'Role' column from tsao_accounts table only accepts values 'Administrator' and 'User'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.129" endtime="20240214 14:22:12.147"/>
</test>
<test id="s1-t21" name="Verify Admin Role Presence in tsao_accounts Table" line="212">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.147" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.147" endtime="20240214 14:22:12.158"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.147" endtime="20240214 14:22:12.158"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${admin_accounts}</var>
<arg>SELECT Username FROM tsao_accounts WHERE Role = 'Administrator'</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.159" level="INFO">Executing : Query  |  SELECT Username FROM tsao_accounts WHERE Role = 'Administrator' </msg>
<msg timestamp="20240214 14:22:12.161" level="INFO">${admin_accounts} = (('lkh2',), ('epv',), ('lws',))</msg>
<status status="PASS" starttime="20240214 14:22:12.159" endtime="20240214 14:22:12.161"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>not ${admin_accounts}</arg>
<arg>Fail</arg>
<arg>No accounts found with the 'Administrator' role.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.162" endtime="20240214 14:22:12.162"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.163" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.163" endtime="20240214 14:22:12.163"/>
</kw>
<doc>Verify that at least one account has the 'Administrator' role in 'tsao_accounts'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.147" endtime="20240214 14:22:12.164"/>
</test>
<test id="s1-t22" name="Verify Default Values of IsApproved and IsDeleted of tsao_accounts Table" line="220">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.164" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.164" endtime="20240214 14:22:12.192"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.164" endtime="20240214 14:22:12.192"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${default_values}</var>
<arg>SELECT IsApproved, IsDeleted FROM tsao_accounts WHERE ID=1</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.193" level="INFO">Executing : Query  |  SELECT IsApproved, IsDeleted FROM tsao_accounts WHERE ID=1 </msg>
<msg timestamp="20240214 14:22:12.193" level="INFO">${default_values} = ((1, 0),)</msg>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${default_values}</arg>
<arg>Verify IsApproved and IsDeleted Default Values</arg>
<arg>${default_values}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Verify IsApproved and IsDeleted Default Values">
<arg>${default_values}</arg>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>1</arg>
<arg>${values[0][0]}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20240214 14:22:12.193" level="INFO">Argument types are:
&lt;class 'str'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>0</arg>
<arg>${values[0][1]}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20240214 14:22:12.193" level="INFO">Argument types are:
&lt;class 'str'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>not ${default_values}</arg>
<arg>Fail</arg>
<arg>No default values found for the 'IsApproved' and 'IsDeleted' columns</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.193" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.193"/>
</kw>
<doc>Verify default values for 'IsApproved' and 'IsDeleted' of tsao_accounts table.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.164" endtime="20240214 14:22:12.193"/>
</test>
<test id="s1-t23" name="Verify That Usernames in tsao_accounts Table are Unique" line="229">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.193" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.208"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.208"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${duplicate_usernames}</var>
<arg>SELECT Username, COUNT(*) FROM tsao_accounts GROUP BY Username HAVING COUNT(*) &gt; 1</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.209" level="INFO">Executing : Query  |  SELECT Username, COUNT(*) FROM tsao_accounts GROUP BY Username HAVING COUNT(*) &gt; 1 </msg>
<msg timestamp="20240214 14:22:12.210" level="INFO">${duplicate_usernames} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.209" endtime="20240214 14:22:12.210"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${duplicate_usernames}</arg>
<arg>Fail</arg>
<arg>Duplicate usernames found: ${duplicate_usernames}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.210" endtime="20240214 14:22:12.211"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.211" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.211" endtime="20240214 14:22:12.212"/>
</kw>
<doc>Verify that all usernames in 'tsao_accounts' table are unique.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.193" endtime="20240214 14:22:12.212"/>
</test>
<test id="s1-t24" name="Verify Minimum Password Length in tsao_accounts Table" line="237">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.212" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.212" endtime="20240214 14:22:12.225"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.212" endtime="20240214 14:22:12.225"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${short_passwords}</var>
<arg>SELECT Username FROM tsao_accounts WHERE LENGTH(Password) &lt; 8</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.226" level="INFO">Executing : Query  |  SELECT Username FROM tsao_accounts WHERE LENGTH(Password) &lt; 8 </msg>
<msg timestamp="20240214 14:22:12.227" level="INFO">${short_passwords} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.226" endtime="20240214 14:22:12.227"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${short_passwords}</arg>
<arg>Fail</arg>
<arg>Passwords with insufficient length found: ${short_passwords}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.228" endtime="20240214 14:22:12.228"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.229" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.228" endtime="20240214 14:22:12.229"/>
</kw>
<doc>Verify that passwords in 'tsao_accounts' table have a minimum length of 8 characters.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.212" endtime="20240214 14:22:12.229"/>
</test>
<test id="s1-t25" name="Verify Creation Date Range in tsao_accounts Table is Valid" line="245">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.229" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.229" endtime="20240214 14:22:12.241"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.229" endtime="20240214 14:22:12.241"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${out_of_range_dates}</var>
<arg>SELECT Username FROM tsao_accounts WHERE CreationDate &lt; '2024-01-01' OR CreationDate &gt; '2024-12-31'</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.242" level="INFO">Executing : Query  |  SELECT Username FROM tsao_accounts WHERE CreationDate &lt; '2024-01-01' OR CreationDate &gt; '2024-12-31' </msg>
<msg timestamp="20240214 14:22:12.243" level="INFO">${out_of_range_dates} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.242" endtime="20240214 14:22:12.243"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${out_of_range_dates}</arg>
<arg>Fail</arg>
<arg>Dates outside the acceptable range found: ${out_of_range_dates}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.244" endtime="20240214 14:22:12.244"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.244" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.244" endtime="20240214 14:22:12.245"/>
</kw>
<doc>Verify that the 'CreationDate' values in 'tsao_accounts' are within an acceptable range.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.229" endtime="20240214 14:22:12.246"/>
</test>
<test id="s1-t26" name="Verify Inactive Accounts in tsao_accounts Table Marked Correctly" line="253">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.246" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.246" endtime="20240214 14:22:12.258"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.246" endtime="20240214 14:22:12.258"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${inactive_accounts}</var>
<arg>SELECT Username FROM tsao_accounts WHERE IsDeleted = true AND IsApproved = false</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.259" level="INFO">Executing : Query  |  SELECT Username FROM tsao_accounts WHERE IsDeleted = true AND IsApproved = false </msg>
<msg timestamp="20240214 14:22:12.260" level="INFO">${inactive_accounts} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.259" endtime="20240214 14:22:12.260"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${inactive_accounts}</arg>
<arg>Fail</arg>
<arg>Inactive accounts not marked correctly: ${inactive_accounts}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.261" endtime="20240214 14:22:12.261"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.262" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.262" endtime="20240214 14:22:12.262"/>
</kw>
<doc>Verify that accounts marked as 'IsDeleted' are also marked as 'IsApproved'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.246" endtime="20240214 14:22:12.263"/>
</test>
<test id="s1-t27" name="Check Academic Year Format" line="261">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.263" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.263" endtime="20240214 14:22:12.263"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.263" endtime="20240214 14:22:12.263"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${incorrect_academic_years}</var>
<arg>SELECT AcadYear FROM tsao_records WHERE NOT AcadYear REGEXP '^\d{4}/\d{2}$'</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.263" level="INFO">Executing : Query  |  SELECT AcadYear FROM tsao_records WHERE NOT AcadYear REGEXP '^d{4}/d{2}$' </msg>
<msg timestamp="20240214 14:22:12.263" level="INFO">${incorrect_academic_years} = (('2023/24',), ('2023/24',))</msg>
<status status="PASS" starttime="20240214 14:22:12.263" endtime="20240214 14:22:12.263"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${incorrect_academic_years}</arg>
<arg>Log Many</arg>
<arg>Incorrect 'AcadYear' formats found in 'tsao_records': ${incorrect_academic_years}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Log Many" library="BuiltIn">
<arg>Incorrect 'AcadYear' formats found in 'tsao_records': ${incorrect_academic_years}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20240214 14:22:12.263" level="INFO">Incorrect 'AcadYear' formats found in 'tsao_records': (('2023/24',), ('2023/24',))</msg>
<status status="PASS" starttime="20240214 14:22:12.263" endtime="20240214 14:22:12.263"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.263" endtime="20240214 14:22:12.263"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${incorrect_academic_years}</arg>
<arg>Fail</arg>
<arg>'AcadYear' values does not match. Detailed failures: ${incorrect_academic_years}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Fail" library="BuiltIn">
<arg>'AcadYear' values does not match. Detailed failures: ${incorrect_academic_years}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20240214 14:22:12.275" level="FAIL">'AcadYear' values does not match. Detailed failures: (('2023/24',), ('2023/24',))</msg>
<status status="FAIL" starttime="20240214 14:22:12.274" endtime="20240214 14:22:12.275"/>
</kw>
<status status="FAIL" starttime="20240214 14:22:12.274" endtime="20240214 14:22:12.275"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.276" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.275" endtime="20240214 14:22:12.276"/>
</kw>
<doc>Verify that 'AcadYear' values in 'tsao_records' follow the format: YYYY/YY (e.g., 2023/24).</doc>
<tag>Verify/Check</tag>
<status status="FAIL" starttime="20240214 14:22:12.263" endtime="20240214 14:22:12.276">'AcadYear' values does not match. Detailed failures: (('2023/24',), ('2023/24',))</status>
</test>
<test id="s1-t28" name="Verify Count Range of Student in tsao_records Table" line="270">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.279" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.279" endtime="20240214 14:22:12.292"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.279" endtime="20240214 14:22:12.292"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${out_of_range_student_counts}</var>
<arg>SELECT StudentCount FROM tsao_records WHERE StudentCount &lt; 0 OR StudentCount &gt; 1000</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.293" level="INFO">Executing : Query  |  SELECT StudentCount FROM tsao_records WHERE StudentCount &lt; 0 OR StudentCount &gt; 1000 </msg>
<msg timestamp="20240214 14:22:12.295" level="INFO">${out_of_range_student_counts} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.293" endtime="20240214 14:22:12.295"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${out_of_range_student_counts}</arg>
<arg>Fail</arg>
<arg>'StudentCount' values outside the acceptable range found in 'tsao_records': ${out_of_range_student_counts}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.295" endtime="20240214 14:22:12.296"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.297" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.296" endtime="20240214 14:22:12.297"/>
</kw>
<doc>Verify that 'StudentCount' values in 'tsao_records' are within an acceptable range.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.278" endtime="20240214 14:22:12.297"/>
</test>
<test id="s1-t29" name="Verify Record Creation Date Range in tsao_records Table is Valid" line="278">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.297" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.297" endtime="20240214 14:22:12.313"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.297" endtime="20240214 14:22:12.313"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${out_of_range_record_dates}</var>
<arg>SELECT CreationDate FROM tsao_records WHERE CreationDate &lt; '2024-01-01' OR CreationDate &gt; '2024-12-31'</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.313" level="INFO">Executing : Query  |  SELECT CreationDate FROM tsao_records WHERE CreationDate &lt; '2024-01-01' OR CreationDate &gt; '2024-12-31' </msg>
<msg timestamp="20240214 14:22:12.313" level="INFO">${out_of_range_record_dates} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.313" endtime="20240214 14:22:12.313"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${out_of_range_record_dates}</arg>
<arg>Fail</arg>
<arg>Dates outside the acceptable range found in 'tsao_records': ${out_of_range_record_dates}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.313" endtime="20240214 14:22:12.313"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.313" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.313" endtime="20240214 14:22:12.313"/>
</kw>
<doc>Verify that 'CreationDate' values in 'tsao_records' are within an acceptable range.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.297" endtime="20240214 14:22:12.313"/>
</test>
<test id="s1-t30" name="Verify Deleted Records in tsao_records Table is Absence" line="286">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.325" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.324" endtime="20240214 14:22:12.345"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.324" endtime="20240214 14:22:12.345"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${deleted_records}</var>
<arg>SELECT Title FROM tsao_records WHERE IsDeleted = true</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.346" level="INFO">Executing : Query  |  SELECT Title FROM tsao_records WHERE IsDeleted = true </msg>
<msg timestamp="20240214 14:22:12.346" level="INFO">${deleted_records} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.345" endtime="20240214 14:22:12.346"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${deleted_records}</arg>
<arg>Fail</arg>
<arg>Deleted records found in 'tsao_records': ${deleted_records}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.346" endtime="20240214 14:22:12.346"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.346" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.346" endtime="20240214 14:22:12.346"/>
</kw>
<doc>Verify that records marked as 'IsDeleted' are not present in 'tsao_records'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.313" endtime="20240214 14:22:12.346"/>
</test>
<test id="s1-t31" name="Verify Description Length in tsao_records Table" line="294">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.346" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.346" endtime="20240214 14:22:12.360"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.346" endtime="20240214 14:22:12.360"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${long_descriptions}</var>
<arg>SELECT Title, LENGTH(Description) FROM tsao_records WHERE LENGTH(Description) &gt; 500</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.361" level="INFO">Executing : Query  |  SELECT Title, LENGTH(Description) FROM tsao_records WHERE LENGTH(Description) &gt; 500 </msg>
<msg timestamp="20240214 14:22:12.363" level="INFO">${long_descriptions} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.361" endtime="20240214 14:22:12.363"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${long_descriptions}</arg>
<arg>Fail</arg>
<arg>Descriptions exceeding maximum length found in 'tsao_records': ${long_descriptions}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.363" endtime="20240214 14:22:12.363"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.363" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.363" endtime="20240214 14:22:12.363"/>
</kw>
<doc>Verify that 'Description' values in 'tsao_records' have a maximum length of 500 characters.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.346" endtime="20240214 14:22:12.363"/>
</test>
<test id="s1-t32" name="Verify Titles in tsao_records Table are Unique" line="302">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.363" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.363" endtime="20240214 14:22:12.374"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.363" endtime="20240214 14:22:12.375"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${duplicate_titles}</var>
<arg>SELECT Title, COUNT(*) FROM tsao_records GROUP BY Title HAVING COUNT(*) &gt; 1</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.375" level="INFO">Executing : Query  |  SELECT Title, COUNT(*) FROM tsao_records GROUP BY Title HAVING COUNT(*) &gt; 1 </msg>
<msg timestamp="20240214 14:22:12.376" level="INFO">${duplicate_titles} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.375" endtime="20240214 14:22:12.376"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${duplicate_titles}</arg>
<arg>Fail</arg>
<arg>Duplicate record titles found in 'tsao_records': ${duplicate_titles}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.377" endtime="20240214 14:22:12.377"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.378" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.378" endtime="20240214 14:22:12.378"/>
</kw>
<doc>Verify that all 'Title' values in 'tsao_records' are unique.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.363" endtime="20240214 14:22:12.378"/>
</test>
<test id="s1-t33" name="Verify Company Name Length of tsao_records Table" line="310">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.378" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.378" endtime="20240214 14:22:12.391"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.378" endtime="20240214 14:22:12.391"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${long_company_names}</var>
<arg>SELECT Title, LENGTH(CompanyName) FROM tsao_records WHERE LENGTH(CompanyName) &gt; 100</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.392" level="INFO">Executing : Query  |  SELECT Title, LENGTH(CompanyName) FROM tsao_records WHERE LENGTH(CompanyName) &gt; 100 </msg>
<msg timestamp="20240214 14:22:12.393" level="INFO">${long_company_names} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.392" endtime="20240214 14:22:12.393"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${long_company_names}</arg>
<arg>Fail</arg>
<arg>Company names exceeding maximum length found in 'tsao_records': ${long_company_names}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.394" endtime="20240214 14:22:12.394"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.396" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.396" endtime="20240214 14:22:12.396"/>
</kw>
<doc>Verify that 'CompanyName' values in 'tsao_records' have a maximum length of 100 characters.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.378" endtime="20240214 14:22:12.396"/>
</test>
<test id="s1-t34" name="Verify Company POC Length of tsao_accounts Table" line="318">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.396" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.396" endtime="20240214 14:22:12.408"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.396" endtime="20240214 14:22:12.408"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${long_company_pocs}</var>
<arg>SELECT Title, LENGTH(CompanyPOC) FROM tsao_records WHERE LENGTH(CompanyPOC) &gt; 100</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.409" level="INFO">Executing : Query  |  SELECT Title, LENGTH(CompanyPOC) FROM tsao_records WHERE LENGTH(CompanyPOC) &gt; 100 </msg>
<msg timestamp="20240214 14:22:12.410" level="INFO">${long_company_pocs} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.409" endtime="20240214 14:22:12.410"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${long_company_pocs}</arg>
<arg>Fail</arg>
<arg>Company points of contact exceeding maximum length found in 'tsao_records': ${long_company_pocs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.411" endtime="20240214 14:22:12.411"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.412" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.412" endtime="20240214 14:22:12.412"/>
</kw>
<doc>Verify that 'CompanyPOC' values in 'tsao_records' have a maximum length of 100 characters.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.396" endtime="20240214 14:22:12.412"/>
</test>
<test id="s1-t35" name="Verify Creation Date in tsao_records are Valid" line="326">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.412" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.412" endtime="20240214 14:22:12.425"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.412" endtime="20240214 14:22:12.425"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${missing_creation_dates}</var>
<arg>SELECT Title FROM tsao_records WHERE CreationDate IS NULL</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.426" level="INFO">Executing : Query  |  SELECT Title FROM tsao_records WHERE CreationDate IS NULL </msg>
<msg timestamp="20240214 14:22:12.427" level="INFO">${missing_creation_dates} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.426" endtime="20240214 14:22:12.427"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${missing_creation_dates}</arg>
<arg>Fail</arg>
<arg>Records with missing 'CreationDate' found in 'tsao_records': ${missing_creation_dates}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.428" endtime="20240214 14:22:12.428"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.429" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.429" endtime="20240214 14:22:12.429"/>
</kw>
<doc>Verify that 'CreationDate' values in 'tsao_records' are populated and not null.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.412" endtime="20240214 14:22:12.429"/>
</test>
<test id="s1-t36" name="Verify Deletion Cascade of tsao_accounts Table" line="334">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.429" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.429" endtime="20240214 14:22:12.446"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.429" endtime="20240214 14:22:12.446"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>DELETE FROM tsao_accounts WHERE ID=7</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.446" level="INFO">Executing : Execute SQL String  |  DELETE FROM tsao_accounts WHERE ID=7</msg>
<status status="PASS" starttime="20240214 14:22:12.446" endtime="20240214 14:22:12.453"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${remaining_records}</var>
<arg>SELECT Title FROM tsao_records WHERE AccountID=7</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.453" level="INFO">Executing : Query  |  SELECT Title FROM tsao_records WHERE AccountID=7 </msg>
<msg timestamp="20240214 14:22:12.457" level="INFO">${remaining_records} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.453" endtime="20240214 14:22:12.457"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${remaining_records}</arg>
<arg>Fail</arg>
<arg>Records associated with deleted account still exist in 'tsao_records': ${remaining_records}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.457" endtime="20240214 14:22:12.457"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.458" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.458" endtime="20240214 14:22:12.458"/>
</kw>
<doc>Verify that deleting an account in 'tsao_accounts' cascades to delete associated records in 'tsao_records'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.429" endtime="20240214 14:22:12.459"/>
</test>
<test id="s1-t37" name="Verify Deletion Cascade - Inverse of tsao_records Table" line="344">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.464" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.462" endtime="20240214 14:22:12.492"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.462" endtime="20240214 14:22:12.492"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>DELETE FROM tsao_records WHERE ID=3</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.493" level="INFO">Executing : Execute SQL String  |  DELETE FROM tsao_records WHERE ID=3</msg>
<status status="PASS" starttime="20240214 14:22:12.493" endtime="20240214 14:22:12.493"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${remaining_accounts}</var>
<arg>SELECT ID FROM tsao_accounts WHERE ID=3</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.493" level="INFO">Executing : Query  |  SELECT ID FROM tsao_accounts WHERE ID=3 </msg>
<msg timestamp="20240214 14:22:12.493" level="INFO">${remaining_accounts} = ((3,),)</msg>
<status status="PASS" starttime="20240214 14:22:12.493" endtime="20240214 14:22:12.493"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>not ${remaining_accounts}</arg>
<arg>Fail</arg>
<arg>Associated account deleted along with the record in 'tsao_records'.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.493" endtime="20240214 14:22:12.493"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.493" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.493" endtime="20240214 14:22:12.493"/>
</kw>
<doc>Verify that deleting a record in 'tsao_records' does not affect the associated account in 'tsao_accounts'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.461" endtime="20240214 14:22:12.493"/>
</test>
<test id="s1-t38" name="Verify Association of tsao_accounts Table and tsao_records Table" line="354">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.501" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.501" endtime="20240214 14:22:12.514"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.501" endtime="20240214 14:22:12.514"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${invalid_associations}</var>
<arg>SELECT r.ID, r.Title FROM tsao_records r LEFT JOIN tsao_accounts a ON r.AccountID = a.ID WHERE a.ID IS NULL</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.514" level="INFO">Executing : Query  |  SELECT r.ID, r.Title FROM tsao_records r LEFT JOIN tsao_accounts a ON r.AccountID = a.ID WHERE a.ID IS NULL </msg>
<msg timestamp="20240214 14:22:12.514" level="INFO">${invalid_associations} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.514" endtime="20240214 14:22:12.514"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${invalid_associations}</arg>
<arg>Fail</arg>
<arg>Records with invalid associations found in 'tsao_records': ${invalid_associations}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.514" endtime="20240214 14:22:12.514"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.514" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.514" endtime="20240214 14:22:12.514"/>
</kw>
<doc>Verify that each record in 'tsao_records' is associated with a valid account in 'tsao_accounts'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.501" endtime="20240214 14:22:12.514"/>
</test>
<test id="s1-t39" name="Verify Deletion Cascade of tsao_accounts Table and tsao_records Table" line="362">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.526" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.526" endtime="20240214 14:22:12.542"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.526" endtime="20240214 14:22:12.542"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>DELETE FROM tsao_accounts WHERE ID = 9</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.543" level="INFO">Executing : Execute SQL String  |  DELETE FROM tsao_accounts WHERE ID = 9</msg>
<status status="PASS" starttime="20240214 14:22:12.543" endtime="20240214 14:22:12.544"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${remaining_records}</var>
<arg>SELECT Title FROM tsao_records WHERE AccountID = 9</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240214 14:22:12.544" level="INFO">Executing : Query  |  SELECT Title FROM tsao_records WHERE AccountID = 9 </msg>
<msg timestamp="20240214 14:22:12.544" level="INFO">${remaining_records} = ()</msg>
<status status="PASS" starttime="20240214 14:22:12.544" endtime="20240214 14:22:12.544"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${remaining_records}</arg>
<arg>Fail</arg>
<arg>Records associated with deleted account still exist in 'tsao_records': ${remaining_records}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20240214 14:22:12.544" endtime="20240214 14:22:12.544"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.544" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.544" endtime="20240214 14:22:12.544"/>
</kw>
<doc>Verify that deleting an account in 'tsao_accounts' cascades to delete all associated records in 'tsao_records'.</doc>
<tag>Verify/Check</tag>
<status status="PASS" starttime="20240214 14:22:12.524" endtime="20240214 14:22:12.544"/>
</test>
<test id="s1-t40" name="Insert Data with Invalid Role" line="374">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.544" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.544" endtime="20240214 14:22:12.558"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.544" endtime="20240214 14:22:12.558"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (6, 'John', 'john', 'password123', 'Test', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (6, 'John', 'john', 'password123', 'Test', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.559" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (6, 'John', 'john', 'password123', 'Test', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.560" level="FAIL">DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.559" endtime="20240214 14:22:12.562"/>
</kw>
<msg timestamp="20240214 14:22:12.562" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.562" level="INFO">${result} = ('FAIL', 'DataError: (1265, "Data truncated for column \'Role\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.559" endtime="20240214 14:22:12.562"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.562" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.562" endtime="20240214 14:22:12.562"/>
</kw>
<doc>Test inserting data with an invalid role into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.544" endtime="20240214 14:22:12.562"/>
</test>
<test id="s1-t41" name="Insert Data with Duplicate Username" line="381">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.576" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.574" endtime="20240214 14:22:12.591"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.574" endtime="20240214 14:22:12.591"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John', 'johndoe', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John', 'johndoe', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.593" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John', 'johndoe', 'password123', 'User', '2024-01-22 12:34:56', true, false)</msg>
<status status="PASS" starttime="20240214 14:22:12.593" endtime="20240214 14:22:12.593"/>
</kw>
<msg timestamp="20240214 14:22:12.593" level="INFO">${result} = ('PASS', None)</msg>
<status status="PASS" starttime="20240214 14:22:12.592" endtime="20240214 14:22:12.593"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.593" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.593" endtime="20240214 14:22:12.593"/>
</kw>
<doc>Test inserting data with a duplicate username into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.574" endtime="20240214 14:22:12.593"/>
</test>
<test id="s1-t42" name="Insert Data with Missing Value" line="388">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.593" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.593" endtime="20240214 14:22:12.608"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.593" endtime="20240214 14:22:12.608"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John Doe', 'johndoe', 'password123', NULL, '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John Doe', 'johndoe', 'password123', NULL, '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.609" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John Doe', 'johndoe', 'password123', NULL, '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.610" level="FAIL">IntegrityError: (1048, "Column 'Role' cannot be null")</msg>
<status status="FAIL" starttime="20240214 14:22:12.609" endtime="20240214 14:22:12.611"/>
</kw>
<msg timestamp="20240214 14:22:12.611" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Role' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.613" level="INFO">${result} = ('FAIL', 'IntegrityError: (1048, "Column \'Role\' cannot be null")')</msg>
<status status="PASS" starttime="20240214 14:22:12.609" endtime="20240214 14:22:12.613"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.614" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.614" endtime="20240214 14:22:12.615"/>
</kw>
<doc>Test inserting data with a missing value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.593" endtime="20240214 14:22:12.615"/>
</test>
<test id="s1-t43" name="Insert Data with Invalid Creation Date" line="395">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.616" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.616" endtime="20240214 14:22:12.631"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.616" endtime="20240214 14:22:12.631"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'jack', 'jackneo', 'password123', 'User', '2024-13-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'jack', 'jackneo', 'password123', 'User', '2024-13-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.631" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'jack', 'jackneo', 'password123', 'User', '2024-13-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.631" level="FAIL">OperationalError: (1292, "Incorrect datetime value: '2024-13-22 12:34:56' for column 'CreationDate' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.631" endtime="20240214 14:22:12.631"/>
</kw>
<msg timestamp="20240214 14:22:12.631" level="WARN">Executing keyword 'Execute SQL String' failed:
OperationalError: (1292, "Incorrect datetime value: '2024-13-22 12:34:56' for column 'CreationDate' at row 1")</msg>
<msg timestamp="20240214 14:22:12.631" level="INFO">${result} = ('FAIL', 'OperationalError: (1292, "Incorrect datetime value: \'2024-13-22 12:34:56\' for column \'CreationDate\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.631" endtime="20240214 14:22:12.631"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.631" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.631" endtime="20240214 14:22:12.631"/>
</kw>
<doc>Test inserting data with an invalid creation date into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.616" endtime="20240214 14:22:12.640"/>
</test>
<test id="s1-t44" name="Insert Data with Invalid Role Value" line="402">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.644" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.643" endtime="20240214 14:22:12.658"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.642" endtime="20240214 14:22:12.658"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Johnathan', 'JohnathanTan', 'password123', 'InvalidRole', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Johnathan', 'JohnathanTan', 'password123', 'InvalidRole', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.659" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Johnathan', 'JohnathanTan', 'password123', 'InvalidRole', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.660" level="FAIL">DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.659" endtime="20240214 14:22:12.662"/>
</kw>
<msg timestamp="20240214 14:22:12.662" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.663" level="INFO">${result} = ('FAIL', 'DataError: (1265, "Data truncated for column \'Role\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.659" endtime="20240214 14:22:12.663"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.664" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.664" endtime="20240214 14:22:12.664"/>
</kw>
<doc>Test inserting data with an invalid role value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.642" endtime="20240214 14:22:12.665"/>
</test>
<test id="s1-t45" name="Insert Data with NULL Username" line="409">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.665" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.665" endtime="20240214 14:22:12.665"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.665" endtime="20240214 14:22:12.665"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John Wick', NULL, 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John Wick', NULL, 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.665" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'John Wick', NULL, 'password123', 'User', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.674" level="FAIL">IntegrityError: (1048, "Column 'Username' cannot be null")</msg>
<status status="FAIL" starttime="20240214 14:22:12.665" endtime="20240214 14:22:12.675"/>
</kw>
<msg timestamp="20240214 14:22:12.675" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Username' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.676" level="INFO">${result} = ('FAIL', 'IntegrityError: (1048, "Column \'Username\' cannot be null")')</msg>
<status status="PASS" starttime="20240214 14:22:12.665" endtime="20240214 14:22:12.676"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.677" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.677" endtime="20240214 14:22:12.677"/>
</kw>
<doc>Test inserting data with a NULL username into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.665" endtime="20240214 14:22:12.677"/>
</test>
<test id="s1-t46" name="Insert Data with Invalid Role Format" line="416">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.680" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.680" endtime="20240214 14:22:12.698"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.680" endtime="20240214 14:22:12.698"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Vincent', 'vincentTan', 'password123', 'InvalidRoleFormat', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Vincent', 'vincentTan', 'password123', 'InvalidRoleFormat', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.698" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Vincent', 'vincentTan', 'password123', 'InvalidRoleFormat', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.698" level="FAIL">DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.698" endtime="20240214 14:22:12.698"/>
</kw>
<msg timestamp="20240214 14:22:12.698" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.698" level="INFO">${result} = ('FAIL', 'DataError: (1265, "Data truncated for column \'Role\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.698" endtime="20240214 14:22:12.698"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.707" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.707" endtime="20240214 14:22:12.707"/>
</kw>
<doc>Test inserting data with an invalid role format into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.679" endtime="20240214 14:22:12.707"/>
</test>
<test id="s1-t47" name="Insert Data with Future Creation Date" line="423">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.713" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.710" endtime="20240214 14:22:12.732"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.709" endtime="20240214 14:22:12.732"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Ahboon', 'BoonKim', 'password123', 'User', '2124-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Ahboon', 'BoonKim', 'password123', 'User', '2124-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.732" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Ahboon', 'BoonKim', 'password123', 'User', '2124-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.732" level="FAIL">IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<status status="FAIL" starttime="20240214 14:22:12.732" endtime="20240214 14:22:12.732"/>
</kw>
<msg timestamp="20240214 14:22:12.732" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.732" level="INFO">${result} = ('FAIL', 'IntegrityError: (1062, "Duplicate entry \'7\' for key \'tsao_accounts.PRIMARY\'")')</msg>
<status status="PASS" starttime="20240214 14:22:12.732" endtime="20240214 14:22:12.732"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.740" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.740" endtime="20240214 14:22:12.740"/>
</kw>
<doc>Test inserting data with a future creation date into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.709" endtime="20240214 14:22:12.741"/>
</test>
<test id="s1-t48" name="Insert Data with Non-Boolean IsApproved Value" line="430">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.746" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.744" endtime="20240214 14:22:12.749"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.743" endtime="20240214 14:22:12.749"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhGua', 'GuaGua', 'password123', 'User', '2024-01-22 12:34:56', 'Yes', false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhGua', 'GuaGua', 'password123', 'User', '2024-01-22 12:34:56', 'Yes', false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.749" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhGua', 'GuaGua', 'password123', 'User', '2024-01-22 12:34:56', 'Yes', false)</msg>
<msg timestamp="20240214 14:22:12.749" level="FAIL">DataError: (1366, "Incorrect integer value: 'Yes' for column 'IsApproved' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.749" endtime="20240214 14:22:12.749"/>
</kw>
<msg timestamp="20240214 14:22:12.749" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1366, "Incorrect integer value: 'Yes' for column 'IsApproved' at row 1")</msg>
<msg timestamp="20240214 14:22:12.749" level="INFO">${result} = ('FAIL', 'DataError: (1366, "Incorrect integer value: \'Yes\' for column \'IsApproved\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.749" endtime="20240214 14:22:12.749"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.757" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.749" endtime="20240214 14:22:12.757"/>
</kw>
<doc>Test inserting data with a non-boolean IsApproved value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.742" endtime="20240214 14:22:12.757"/>
</test>
<test id="s1-t49" name="Insert Data with Invalid Password Format" line="437">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.761" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.760" endtime="20240214 14:22:12.764"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.760" endtime="20240214 14:22:12.764"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhBoy', 'BoyBoy', 'pass', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhBoy', 'BoyBoy', 'pass', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.765" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhBoy', 'BoyBoy', 'pass', 'User', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.765" level="FAIL">IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<status status="FAIL" starttime="20240214 14:22:12.765" endtime="20240214 14:22:12.765"/>
</kw>
<msg timestamp="20240214 14:22:12.765" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.765" level="INFO">${result} = ('FAIL', 'IntegrityError: (1062, "Duplicate entry \'7\' for key \'tsao_accounts.PRIMARY\'")')</msg>
<status status="PASS" starttime="20240214 14:22:12.765" endtime="20240214 14:22:12.765"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.765" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.765" endtime="20240214 14:22:12.765"/>
</kw>
<doc>Test inserting data with an invalid password format into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.759" endtime="20240214 14:22:12.765"/>
</test>
<test id="s1-t50" name="Insert Data with Invalid Creation Date Format" line="444">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.777" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.776" endtime="20240214 14:22:12.796"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.776" endtime="20240214 14:22:12.796"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhChicken', 'Chicken', 'password123', 'User', '2024-013-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhChicken', 'Chicken', 'password123', 'User', '2024-013-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.797" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhChicken', 'Chicken', 'password123', 'User', '2024-013-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.798" level="FAIL">OperationalError: (1292, "Incorrect datetime value: '2024-013-22 12:34:56' for column 'CreationDate' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.797" endtime="20240214 14:22:12.798"/>
</kw>
<msg timestamp="20240214 14:22:12.798" level="WARN">Executing keyword 'Execute SQL String' failed:
OperationalError: (1292, "Incorrect datetime value: '2024-013-22 12:34:56' for column 'CreationDate' at row 1")</msg>
<msg timestamp="20240214 14:22:12.798" level="INFO">${result} = ('FAIL', 'OperationalError: (1292, "Incorrect datetime value: \'2024-013-22 12:34:56\' for column \'CreationDate\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.797" endtime="20240214 14:22:12.798"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.798" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.798" endtime="20240214 14:22:12.798"/>
</kw>
<doc>Test inserting data with an invalid creation date format into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.775" endtime="20240214 14:22:12.798"/>
</test>
<test id="s1-t51" name="Insert Data with Null Role" line="451">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.810" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.807" endtime="20240214 14:22:12.812"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.807" endtime="20240214 14:22:12.812"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Diana', 'DianaTan', 'password123', NULL, '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Diana', 'DianaTan', 'password123', NULL, '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.813" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Diana', 'DianaTan', 'password123', NULL, '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.814" level="FAIL">IntegrityError: (1048, "Column 'Role' cannot be null")</msg>
<status status="FAIL" starttime="20240214 14:22:12.813" endtime="20240214 14:22:12.815"/>
</kw>
<msg timestamp="20240214 14:22:12.815" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Role' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.815" level="INFO">${result} = ('FAIL', 'IntegrityError: (1048, "Column \'Role\' cannot be null")')</msg>
<status status="PASS" starttime="20240214 14:22:12.813" endtime="20240214 14:22:12.815"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.815" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.815" endtime="20240214 14:22:12.815"/>
</kw>
<doc>Test inserting data with a NULL role value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.798" endtime="20240214 14:22:12.815"/>
</test>
<test id="s1-t52" name="Insert Data with Invalid IsApproved Value" line="458">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.824" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.815" endtime="20240214 14:22:12.827"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.815" endtime="20240214 14:22:12.827"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Chirsty', 'ChirstyTee', 'password123', 'User', '2024-01-22 12:34:56', 'Yes', false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Chirsty', 'ChirstyTee', 'password123', 'User', '2024-01-22 12:34:56', 'Yes', false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.828" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Chirsty', 'ChirstyTee', 'password123', 'User', '2024-01-22 12:34:56', 'Yes', false)</msg>
<msg timestamp="20240214 14:22:12.830" level="FAIL">DataError: (1366, "Incorrect integer value: 'Yes' for column 'IsApproved' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.828" endtime="20240214 14:22:12.830"/>
</kw>
<msg timestamp="20240214 14:22:12.830" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1366, "Incorrect integer value: 'Yes' for column 'IsApproved' at row 1")</msg>
<msg timestamp="20240214 14:22:12.831" level="INFO">${result} = ('FAIL', 'DataError: (1366, "Incorrect integer value: \'Yes\' for column \'IsApproved\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.827" endtime="20240214 14:22:12.831"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.832" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.832" endtime="20240214 14:22:12.832"/>
</kw>
<doc>Test inserting data with an invalid IsApproved value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.815" endtime="20240214 14:22:12.832"/>
</test>
<test id="s1-t53" name="Insert Data with Invalid IsDeleted Value" line="465">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.832" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.832" endtime="20240214 14:22:12.846"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.832" endtime="20240214 14:22:12.846"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhPok', 'PokYou', 'password123', 'User', '2024-01-22 12:34:56', true, 'InvalidValue')</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhPok', 'PokYou', 'password123', 'User', '2024-01-22 12:34:56', true, 'InvalidValue')</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.846" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'AhPok', 'PokYou', 'password123', 'User', '2024-01-22 12:34:56', true, 'InvalidValue')</msg>
<msg timestamp="20240214 14:22:12.846" level="FAIL">DataError: (1366, "Incorrect integer value: 'InvalidValue' for column 'IsDeleted' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.846" endtime="20240214 14:22:12.846"/>
</kw>
<msg timestamp="20240214 14:22:12.846" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1366, "Incorrect integer value: 'InvalidValue' for column 'IsDeleted' at row 1")</msg>
<msg timestamp="20240214 14:22:12.846" level="INFO">${result} = ('FAIL', 'DataError: (1366, "Incorrect integer value: \'InvalidValue\' for column \'IsDeleted\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.846" endtime="20240214 14:22:12.846"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.846" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.846" endtime="20240214 14:22:12.846"/>
</kw>
<doc>Test inserting data with an invalid IsDeleted value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.832" endtime="20240214 14:22:12.846"/>
</test>
<test id="s1-t54" name="Insert Data with Invalid Data Type" line="472">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.860" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.858" endtime="20240214 14:22:12.862"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.858" endtime="20240214 14:22:12.862"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES ('7', 'AhGay', 'GayGay', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES ('7', 'AhGay', 'GayGay', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.863" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES ('7', 'AhGay', 'GayGay', 'password123', 'User', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.864" level="FAIL">IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<status status="FAIL" starttime="20240214 14:22:12.863" endtime="20240214 14:22:12.864"/>
</kw>
<msg timestamp="20240214 14:22:12.864" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.864" level="INFO">${result} = ('FAIL', 'IntegrityError: (1062, "Duplicate entry \'7\' for key \'tsao_accounts.PRIMARY\'")')</msg>
<status status="PASS" starttime="20240214 14:22:12.863" endtime="20240214 14:22:12.864"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.864" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.864" endtime="20240214 14:22:12.864"/>
</kw>
<doc>Test inserting data with an invalid data type into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.857" endtime="20240214 14:22:12.864"/>
</test>
<test id="s1-t55" name="Insert Data with Duplicate ID" line="479">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.876" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.874" endtime="20240214 14:22:12.879"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.874" endtime="20240214 14:22:12.879"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (1, 'TryMe', 'MeIsCute', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (1, 'TryMe', 'MeIsCute', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.880" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (1, 'TryMe', 'MeIsCute', 'password123', 'User', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.881" level="FAIL">IntegrityError: (1062, "Duplicate entry '1' for key 'tsao_accounts.PRIMARY'")</msg>
<status status="FAIL" starttime="20240214 14:22:12.880" endtime="20240214 14:22:12.882"/>
</kw>
<msg timestamp="20240214 14:22:12.882" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '1' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.882" level="INFO">${result} = ('FAIL', 'IntegrityError: (1062, "Duplicate entry \'1\' for key \'tsao_accounts.PRIMARY\'")')</msg>
<status status="PASS" starttime="20240214 14:22:12.880" endtime="20240214 14:22:12.882"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.882" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.882" endtime="20240214 14:22:12.882"/>
</kw>
<doc>Test inserting data with a duplicate ID into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.864" endtime="20240214 14:22:12.882"/>
</test>
<test id="s1-t56" name="Insert Data with Null Value for Required Field" line="486">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.892" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.890" endtime="20240214 14:22:12.894"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.890" endtime="20240214 14:22:12.894"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, NULL, 'Asher', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, NULL, 'Asher', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.895" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, NULL, 'Asher', 'password123', 'User', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.896" level="FAIL">IntegrityError: (1048, "Column 'Name' cannot be null")</msg>
<status status="FAIL" starttime="20240214 14:22:12.895" endtime="20240214 14:22:12.897"/>
</kw>
<msg timestamp="20240214 14:22:12.897" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Name' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.897" level="INFO">${result} = ('FAIL', 'IntegrityError: (1048, "Column \'Name\' cannot be null")')</msg>
<status status="PASS" starttime="20240214 14:22:12.895" endtime="20240214 14:22:12.897"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.897" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.897" endtime="20240214 14:22:12.897"/>
</kw>
<doc>Test inserting data with a NULL value for a required field into 'tsao_accounts' table for 'Name'.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.882" endtime="20240214 14:22:12.897"/>
</test>
<test id="s1-t57" name="Insert Data with Invalid Enum Value" line="493">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.897" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.897" endtime="20240214 14:22:12.909"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.897" endtime="20240214 14:22:12.909"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Michelle', 'michelle', 'password123', 'InvalidRole', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Michelle', 'michelle', 'password123', 'InvalidRole', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.910" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (7, 'Michelle', 'michelle', 'password123', 'InvalidRole', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.911" level="FAIL">DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<status status="FAIL" starttime="20240214 14:22:12.910" endtime="20240214 14:22:12.912"/>
</kw>
<msg timestamp="20240214 14:22:12.912" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.914" level="INFO">${result} = ('FAIL', 'DataError: (1265, "Data truncated for column \'Role\' at row 1")')</msg>
<status status="PASS" starttime="20240214 14:22:12.909" endtime="20240214 14:22:12.914"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.914" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.914" endtime="20240214 14:22:12.914"/>
</kw>
<doc>Test inserting data with an invalid enum value into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.897" endtime="20240214 14:22:12.914"/>
</test>
<test id="s1-t58" name="Insert Data with Non-Unique Index Violation" line="500">
<kw name="Connect to DB" type="SETUP">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER}</arg>
<arg>${DB_PASSWORD}</arg>
<arg>127.0.0.1</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240214 14:22:12.914" level="INFO">Connecting using : pymysql.connect(db=tsao, user=root, passwd=***, host=127.0.0.1, port=3306, charset=None)</msg>
<status status="PASS" starttime="20240214 14:22:12.914" endtime="20240214 14:22:12.931"/>
</kw>
<status status="PASS" starttime="20240214 14:22:12.914" endtime="20240214 14:22:12.931"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<var>${result}</var>
<arg>Execute SQL String</arg>
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (1, 'John Doe', 'johndoe', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (1, 'John Doe', 'johndoe', 'password123', 'User', '2024-01-22 12:34:56', true, false)</arg>
<doc>Executes the ``sqlString`` as a single SQL command.</doc>
<msg timestamp="20240214 14:22:12.931" level="INFO">Executing : Execute SQL String  |  INSERT INTO tsao_accounts (ID, Name, Username, Password, Role, CreationDate, IsApproved, IsDeleted) VALUES (1, 'John Doe', 'johndoe', 'password123', 'User', '2024-01-22 12:34:56', true, false)</msg>
<msg timestamp="20240214 14:22:12.931" level="FAIL">IntegrityError: (1062, "Duplicate entry '1' for key 'tsao_accounts.PRIMARY'")</msg>
<status status="FAIL" starttime="20240214 14:22:12.931" endtime="20240214 14:22:12.931"/>
</kw>
<msg timestamp="20240214 14:22:12.931" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '1' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.931" level="INFO">${result} = ('FAIL', 'IntegrityError: (1062, "Duplicate entry \'1\' for key \'tsao_accounts.PRIMARY\'")')</msg>
<status status="PASS" starttime="20240214 14:22:12.931" endtime="20240214 14:22:12.931"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20240214 14:22:12.931" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240214 14:22:12.931" endtime="20240214 14:22:12.931"/>
</kw>
<doc>Test inserting data that violates a non-unique index constraint into 'tsao_accounts' table.</doc>
<tag>Insert</tag>
<status status="PASS" starttime="20240214 14:22:12.914" endtime="20240214 14:22:12.940"/>
</test>
<doc>Tests which work with the same input params across all databases.</doc>
<status status="FAIL" starttime="20240214 14:22:11.430" endtime="20240214 14:22:12.941"/>
</suite>
<statistics>
<total>
<stat pass="55" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">Delete</stat>
<stat pass="20" fail="0" skip="0">Insert</stat>
<stat pass="1" fail="0" skip="0">Retrieve</stat>
<stat pass="0" fail="1" skip="0">Select</stat>
<stat pass="1" fail="0" skip="0">Update</stat>
<stat pass="32" fail="2" skip="0">Verify/Check</stat>
</tag>
<suite>
<stat pass="55" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20240214 14:22:12.562" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.611" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Role' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.631" level="WARN">Executing keyword 'Execute SQL String' failed:
OperationalError: (1292, "Incorrect datetime value: '2024-13-22 12:34:56' for column 'CreationDate' at row 1")</msg>
<msg timestamp="20240214 14:22:12.662" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.675" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Username' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.698" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.732" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.749" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1366, "Incorrect integer value: 'Yes' for column 'IsApproved' at row 1")</msg>
<msg timestamp="20240214 14:22:12.765" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.798" level="WARN">Executing keyword 'Execute SQL String' failed:
OperationalError: (1292, "Incorrect datetime value: '2024-013-22 12:34:56' for column 'CreationDate' at row 1")</msg>
<msg timestamp="20240214 14:22:12.815" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Role' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.830" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1366, "Incorrect integer value: 'Yes' for column 'IsApproved' at row 1")</msg>
<msg timestamp="20240214 14:22:12.846" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1366, "Incorrect integer value: 'InvalidValue' for column 'IsDeleted' at row 1")</msg>
<msg timestamp="20240214 14:22:12.864" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '7' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.882" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '1' for key 'tsao_accounts.PRIMARY'")</msg>
<msg timestamp="20240214 14:22:12.897" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1048, "Column 'Name' cannot be null")</msg>
<msg timestamp="20240214 14:22:12.912" level="WARN">Executing keyword 'Execute SQL String' failed:
DataError: (1265, "Data truncated for column 'Role' at row 1")</msg>
<msg timestamp="20240214 14:22:12.931" level="WARN">Executing keyword 'Execute SQL String' failed:
IntegrityError: (1062, "Duplicate entry '1' for key 'tsao_accounts.PRIMARY'")</msg>
</errors>
</robot>
